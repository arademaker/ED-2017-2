#+Title: Aula 06

O problema Counting Inverse está apresentado nos slides compartilhados
com a turma e constitui o objeto do primeiro /programming
assignment/. Notem que o problema é bem parecido com o merge-sort. Com
isso terminamos o capítulo 2 do DPV.

Falamos sobre o projeto do curso. A turma irá desenvolver o projeto de
forma colaborativa e a participação de cada um no projeto será objeto
da avaliação e notas.

* Projeto do Curso

** Introdução

Em geral, nos cursos de estruturas de dados e algorítmos, aprendemos
que busca de um item em uma lista tem complexidade $O(n)$. Por exemplo

#+BEGIN_SRC lisp
  (defun query (item list)
    (if (null list)
	nil
	(if (equal (car list) item)
	    item
	    (query item (cdr list)))))
#+END_SRC

Esta função é implementada em Lisp com nome =find=. Note que no código
acima, estamos assumindo que o item que desejamos buscar, passado como
primeiro argumento, ocorre também na lista (segundo argumento) e a
função (predicado) [[https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node74.html][equal]] conseguirá comparar os dois valores. Também
estamos assumindo que a lista é uma lista de elementos do mesmo tipo
do elemento sendo buscado.

Discutimos em sala como a função =find= e =find-if= de lisp são mais
genéricas e por isso podem operar sobre listas de outros tipos de
objetos de forma mais flexível ao receberem como parâmetro as funções
=key= e =test=.

Em uma aplicação que opere uma uma lista muito grande de elementos que
mude pouco, podemos melhorar o desempenho ordenando a lista inicial e
implementando uma [[https://rosettacode.org/wiki/Binary_search#Common_Lisp][busca mais eficiente (binária)]] sobre a lista
ordenada. Teríamos então:

#+BEGIN_SRC lisp
  (defparameter ordered-list (sort alist ...))
  (binary-search ... ordered-list)
#+END_SRC

Faz sentido? O problema é que a forma como a lista foi ordenada irá
influenciar a eficiência a busca binária.  Imaginem uma lista de pares
ordenada pelo primeiro elemento de cada par:

#+BEGIN_SRC lisp :results output :export both
(print (sort '((10 1) (5 6) (7 8) (10 4) (2 45)) #'< :key #'car))
#+END_SRC

#+RESULTS:
: ((2 45) (5 6) (7 8) (10 1) (10 4)) 

Esta lista ordenada só permitirá que nossa busca binária seja
eficiente se executada sobre os primeiros elementos de cada par. Para
que a busca binária seja eficiente para a busca sobre qualquer
elemento dos pares, uma maneira seria mantermos duas versões da lista
ordenada sobre cada elemento dos pares que desejarmos buscar. Mas
vamos deixar eficiência para daqui a pouco...

** O projeto

Vamos implementar no topo da biblioteca [[https://github.com/own-pt/cl-conllu][cl-conllu]] uma função eficiente
para consulta de sentenças. Esta biblioteca foi criada para
trabalharmos com arquivos [[http://universaldependencies.org/format.html][CoNLL-U]] que contém análises sintáticas de
sentenças. As funcionalidades mais básicas desta biblioteca são as
funções [[https://github.com/own-pt/cl-conllu/blob/master/read-write.lisp#L59-L67][read-conllu]] (lê um arquivo e produz uma lista de objetos da
classe [[https://github.com/own-pt/cl-conllu/blob/master/data.lisp#L45-L57][sentence]]) e [[https://github.com/own-pt/cl-conllu/blob/master/read-write.lisp#L179-L181][write-conllu]] (recebe uma lista de objetos da classe
=sentence= e uma string com o nome de um arquivo e grava as sentenças
no arquivo). Ao longo dos meses, novas funcionalidades foram sendo
incorporadas na biblioteca.

Nosso projeto então consiste em implementarmos uma função para, dada
uma lista de sentença, retornar as sentenças que satisfizerem a um
critério definido pelo usuário através de uma linguagem de
consulta. Um exemplo deste tipo de funcionalidade pode ser visto nos
links do issue e diretamete [[http://bosque.mybluemix.net][aqui]] (escolha o treebank 'bosque-UD'). No
link [[http://bionlp.utu.fi/searchexpressions-new.html][Query Language]] vocês poderam consultar a linguagem de query usada
neste sistema.

Vejam o [[https://github.com/own-pt/cl-conllu/issues/3][issue 3]] já aberto sobre este assunto com links para outros
sistemas que implementam buscas em [[https://en.wikipedia.org/wiki/Treebank][treebanks]].

Uma versão muito preliminar de busca por sentenças foi implementada em
[[https://github.com/own-pt/cl-conllu/blob/master/query.lisp][query.lisp]]. Infelizmente esta função não permite buscas com 

#+BEGIN_QUOTE
Retorne todas as sentenças que tenham algum token com postag VERBO
cujo HEAD seja outro token com lemma /correr/ e a relação entre eles
de /ccomp/.
#+END_QUOTE

Esta consulta seria escrita na linguagem de query do link acima como:

#+BEGIN_EXAMPLE
VERB <ccomp L=correr
#+END_EXAMPLE

Para este projeto, precisaremos pensar em várias questões ligadas ao
curso de estruturas de dados. Mas vamos tentar decompor o problema. Um
link interessante para uma discussão sobre a criação de mecanismos de
busca é [[http://www.ardendertat.com/2011/07/17/how-to-implement-a-search-engine-part-3-ranking-tf-idf/][How to Implement a Search Engine]].

Na aula de hoje, começamos a discutir como seria nossa linguagem de
query. Obviamente, se formos implementar uma linguagem como a [[http://bionlp.utu.fi/searchexpressions-new.html][Query
Language]] teriamos o mesmo esforço que o esforço de implementar a
função abaixo para cálcular o valor de uma expressão matemática
passada como string de forma /infixada/, isto é, teriamos que escrever
um [[https://en.wikipedia.org/wiki/Parsing#Computer_languages][parser]] [fn:1].

#+BEGIN_EXAMPLE
(evaluate "1 + 23 * (5 / 7)")
#+END_EXAMPLE

Nosso parser seria o responsável por entender a string e transforma-la
em uma sequência de operações a serem efetivamente implementadas. Se
usarmos uma notação prefixada, o trabalho é bem mais simples. Usando
Lisp:

#+BEGIN_SRC lisp
(eval '(* (+ 1 23) (/ 5 7)))
#+END_SRC

Então podemos aplicar a mesma idéia para nosso projeto. Ao invés de
receber algo como:

#+BEGIN_EXAMPLE
(query "VERB <ccomp L=correr" ...)
#+END_EXAMPLE

Podemos começar tentando implementar uma função =qi= (de
query-interpreter) que recebe uma [[https://en.wikipedia.org/wiki/S-expression][s-exp]] (logo já em forma pré-fixada)
e gera uma função que pode ser passada para a função =find-if= de
Lisp.

#+BEGIN_SRC lisp
  "VERB <ccomp L=correr"
  (find-if (qi '(ccomp (pos "VERB") (lemma "correr")))
	   ...)

  "_ >nmod (_ >nmod _)"
  (find-if (qi '(nmod (nmod _ _) _))
	   ...)
#+END_SRC

O último exemplo mostra como os operadores básicos podem ser
composicionais. Notem também a direção das setas.

* Footnotes

[fn:1] Note que um parser pode ser usado para entender linguagem
natural para produzir análise de sentenças que são armazenadas em
treebanks e sobre os quais queremos fazer queries. Mas também temos os
parsers para linguagens formais, como linguagem de programação, é
neste contexto que estou usando 'parser' nesta frase.

